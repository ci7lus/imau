type Activity implements Node {
  annictId: Int!
  # ID of the object.
  id: ID!
  user: User!
}

enum ActivityAction {
  CREATE
}

# The connection type for Activity.
type ActivityConnection {
  # A list of edges.
  edges: [ActivityEdge]
  # A list of nodes.
  nodes: [Activity]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ActivityEdge {
  action: ActivityAction!
  annictId: Int!
  # A cursor for use in pagination.
  cursor: String!
  item: ActivityItem
  # Deprecated: Use `item` instead.
  node: ActivityItem @deprecated(reason: "Use `item` instead.")
  user: User!
}

union ActivityItem = MultipleRecord | Record | Review | Status
input ActivityOrder {
  field: ActivityOrderField!
  direction: OrderDirection!
}

enum ActivityOrderField {
  CREATED_AT
}

type Cast implements Node {
  annictId: Int!
  character: Character!
  id: ID!
  name: String!
  nameEn: String!
  person: Person!
  sortNumber: Int!
  work: Work!
}

# The connection type for Cast.
type CastConnection {
  # A list of edges.
  edges: [CastEdge]
  # A list of nodes.
  nodes: [Cast]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CastEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Cast
}

input CastOrder {
  field: CastOrderField!
  direction: OrderDirection!
}

enum CastOrderField {
  CREATED_AT
  SORT_NUMBER
}

type Channel implements Node {
  annictId: Int!
  channelGroup: ChannelGroup!
  id: ID!
  name: String!
  programs(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): ProgramConnection
  published: Boolean!
  scChid: Int!
}

# The connection type for Channel.
type ChannelConnection {
  # A list of edges.
  edges: [ChannelEdge]
  # A list of nodes.
  nodes: [Channel]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ChannelEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Channel
}

type ChannelGroup implements Node {
  annictId: Int!
  channels(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): ChannelConnection
  id: ID!
  name: String!
  sortNumber: Int!
}

type Character implements Node {
  age: String!
  ageEn: String!
  annictId: Int!
  birthday: String!
  birthdayEn: String!
  bloodType: String!
  bloodTypeEn: String!
  description: String!
  descriptionEn: String!
  descriptionSource: String!
  descriptionSourceEn: String!
  favoriteCharactersCount: Int!
  height: String!
  heightEn: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nationality: String!
  nationalityEn: String!
  nickname: String!
  nicknameEn: String!
  occupation: String!
  occupationEn: String!
  series: Series!
  weight: String!
  weightEn: String!
}

# The connection type for Character.
type CharacterConnection {
  # A list of edges.
  edges: [CharacterEdge]
  # A list of nodes.
  nodes: [Character]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type CharacterEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Character
}

input CharacterOrder {
  field: CharacterOrderField!
  direction: OrderDirection!
}

enum CharacterOrderField {
  CREATED_AT
  FAVORITE_CHARACTERS_COUNT
}

# Autogenerated input type of CreateRecord
input CreateRecordInput {
  episodeId: ID!
  comment: String
  ratingState: RatingState
  shareTwitter: Boolean
  shareFacebook: Boolean
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateRecord
type CreateRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  record: Record
}

# Autogenerated input type of CreateReview
input CreateReviewInput {
  workId: ID!
  title: String
  body: String!
  ratingOverallState: RatingState
  ratingAnimationState: RatingState
  ratingMusicState: RatingState
  ratingStoryState: RatingState
  ratingCharacterState: RatingState
  shareTwitter: Boolean
  shareFacebook: Boolean
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of CreateReview
type CreateReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  review: Review
}

scalar DateTime

# Autogenerated input type of DeleteRecord
input DeleteRecordInput {
  recordId: ID!
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteRecord
type DeleteRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  episode: Episode
}

# Autogenerated input type of DeleteReview
input DeleteReviewInput {
  reviewId: ID!
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of DeleteReview
type DeleteReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  work: Work
}

# An episode of a work
type Episode implements Node {
  annictId: Int!
  id: ID!
  nextEpisode: Episode
  number: Int
  numberText: String
  prevEpisode: Episode
  recordCommentsCount: Int!
  records(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: RecordOrder
    hasComment: Boolean
  ): RecordConnection
  recordsCount: Int!
  satisfactionRate: Float
  sortNumber: Int!
  title: String
  viewerDidTrack: Boolean!
  viewerRecordsCount: Int!
  work: Work!
}

# The connection type for Episode.
type EpisodeConnection {
  # A list of edges.
  edges: [EpisodeEdge]
  # A list of nodes.
  nodes: [Episode]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type EpisodeEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Episode
}

input EpisodeOrder {
  field: EpisodeOrderField!
  direction: OrderDirection!
}

enum EpisodeOrderField {
  CREATED_AT
  SORT_NUMBER
}

type LibraryEntry implements Node {
  id: ID!
  nextEpisode: Episode
  nextProgram: Program
  note: String!
  status: Status
  user: User!
  work: Work!
}

# The connection type for LibraryEntry.
type LibraryEntryConnection {
  # A list of edges.
  edges: [LibraryEntryEdge]
  # A list of nodes.
  nodes: [LibraryEntry]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type LibraryEntryEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: LibraryEntry
}

input LibraryEntryOrder {
  field: LibraryEntryOrderField!
  direction: OrderDirection!
}

enum LibraryEntryOrderField {
  # 最後に記録またはスキップした日時
  LAST_TRACKED_AT
}

# Media of anime
enum Media {
  TV
  OVA
  MOVIE
  WEB
  OTHER
}

type MultipleRecord implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  records(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): RecordConnection
  user: User!
  work: Work!
}

type Mutation {
  createRecord(
    # Parameters for CreateRecord
    input: CreateRecordInput!
  ): CreateRecordPayload
  createReview(
    # Parameters for CreateReview
    input: CreateReviewInput!
  ): CreateReviewPayload
  deleteRecord(
    # Parameters for DeleteRecord
    input: DeleteRecordInput!
  ): DeleteRecordPayload
  deleteReview(
    # Parameters for DeleteReview
    input: DeleteReviewInput!
  ): DeleteReviewPayload
  updateRecord(
    # Parameters for UpdateRecord
    input: UpdateRecordInput!
  ): UpdateRecordPayload
  updateReview(
    # Parameters for UpdateReview
    input: UpdateReviewInput!
  ): UpdateReviewPayload
  updateStatus(
    # Parameters for UpdateStatus
    input: UpdateStatusInput!
  ): UpdateStatusPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type Organization implements Node {
  annictId: Int!
  favoriteOrganizationsCount: Int!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}

# The connection type for Organization.
type OrganizationConnection {
  # A list of edges.
  edges: [OrganizationEdge]
  # A list of nodes.
  nodes: [Organization]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type OrganizationEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Organization
}

input OrganizationOrder {
  field: OrganizationOrderField!
  direction: OrderDirection!
}

enum OrganizationOrderField {
  CREATED_AT
  FAVORITE_ORGANIZATIONS_COUNT
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Person implements Node {
  annictId: Int!
  birthday: String!
  bloodType: String!
  castsCount: Int!
  favoritePeopleCount: Int!
  genderText: String!
  height: String!
  id: ID!
  name: String!
  nameEn: String!
  nameKana: String!
  nickname: String!
  nicknameEn: String!
  prefecture: Prefecture!
  staffsCount: Int!
  twitterUsername: String!
  twitterUsernameEn: String!
  url: String!
  urlEn: String!
  wikipediaUrl: String!
  wikipediaUrlEn: String!
}

# The connection type for Person.
type PersonConnection {
  # A list of edges.
  edges: [PersonEdge]
  # A list of nodes.
  nodes: [Person]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type PersonEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Person
}

input PersonOrder {
  field: PersonOrderField!
  direction: OrderDirection!
}

enum PersonOrderField {
  CREATED_AT
  FAVORITE_PEOPLE_COUNT
}

type Prefecture implements Node {
  annictId: Int!
  id: ID!
  name: String!
}

type Program implements Node {
  annictId: Int!
  channel: Channel!
  episode: Episode!
  id: ID!
  rebroadcast: Boolean!
  scPid: Int
  startedAt: DateTime!
  state: ProgramState!
  work: Work!
}

# The connection type for Program.
type ProgramConnection {
  # A list of edges.
  edges: [ProgramEdge]
  # A list of nodes.
  nodes: [Program]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ProgramEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Program
}

input ProgramOrder {
  field: ProgramOrderField!
  direction: OrderDirection!
}

enum ProgramOrderField {
  STARTED_AT
}

enum ProgramState {
  PUBLISHED
  HIDDEN
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  # Fetches a list of objects given a list of IDs.
  nodes(
    # IDs of the objects.
    ids: [ID!]!
  ): [Node]!
  searchCharacters(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    names: [String!]
    orderBy: CharacterOrder
  ): CharacterConnection
  searchEpisodes(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    orderBy: EpisodeOrder
  ): EpisodeConnection
  searchOrganizations(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    names: [String!]
    orderBy: OrganizationOrder
  ): OrganizationConnection
  searchPeople(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    names: [String!]
    orderBy: PersonOrder
  ): PersonConnection
  searchWorks(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    seasons: [String!]
    titles: [String!]
    orderBy: WorkOrder
  ): WorkConnection
  user(username: String!): User
  viewer: User
}

enum RatingState {
  GREAT
  GOOD
  AVERAGE
  BAD
}

type Record implements Node {
  annictId: Int!
  comment: String
  commentsCount: Int!
  createdAt: DateTime!
  episode: Episode!
  facebookClickCount: Int!
  id: ID!
  likesCount: Int!
  modified: Boolean!
  rating: Float
  ratingState: RatingState
  twitterClickCount: Int!
  updatedAt: DateTime!
  user: User!
  work: Work!
}

# The connection type for Record.
type RecordConnection {
  # A list of edges.
  edges: [RecordEdge]
  # A list of nodes.
  nodes: [Record]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type RecordEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Record
}

input RecordOrder {
  field: RecordOrderField!
  direction: OrderDirection!
}

enum RecordOrderField {
  CREATED_AT
  LIKES_COUNT
}

type Review implements Node {
  annictId: Int!
  body: String!
  createdAt: DateTime!
  id: ID!
  impressionsCount: Int!
  likesCount: Int!
  modifiedAt: DateTime
  ratingAnimationState: RatingState
  ratingCharacterState: RatingState
  ratingMusicState: RatingState
  ratingOverallState: RatingState
  ratingStoryState: RatingState
  title: String
  updatedAt: DateTime!
  user: User!
  work: Work!
}

# The connection type for Review.
type ReviewConnection {
  # A list of edges.
  edges: [ReviewEdge]
  # A list of nodes.
  nodes: [Review]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type ReviewEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Review
}

input ReviewOrder {
  field: ReviewOrderField!
  direction: OrderDirection!
}

enum ReviewOrderField {
  CREATED_AT
  LIKES_COUNT
}

# Season name
enum SeasonName {
  WINTER
  SPRING
  SUMMER
  AUTUMN
}

type Series implements Node {
  annictId: Int!
  id: ID!
  name: String!
  nameEn: String!
  nameRo: String!
  works(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: SeriesWorkOrder
  ): SeriesWorkConnection
}

# The connection type for Series.
type SeriesConnection {
  # A list of edges.
  edges: [SeriesEdge]
  # A list of nodes.
  nodes: [Series]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SeriesEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Series
}

# The connection type for Work.
type SeriesWorkConnection {
  # A list of edges.
  edges: [SeriesWorkEdge]
  # A list of nodes.
  nodes: [Work]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type SeriesWorkEdge {
  # A cursor for use in pagination.
  cursor: String!
  item: Work!
  # Deprecated: Use `item` instead.
  node: Work! @deprecated(reason: "Use `item` instead.")
  summary: String
  summaryEn: String
}

input SeriesWorkOrder {
  field: SeriesWorkOrderField!
  direction: OrderDirection!
}

enum SeriesWorkOrderField {
  SEASON
}

type Staff implements Node {
  annictId: Int!
  id: ID!
  name: String!
  nameEn: String!
  resource: StaffResourceItem!
  roleOther: String!
  roleOtherEn: String!
  roleText: String!
  sortNumber: Int!
  work: Work!
}

# The connection type for Staff.
type StaffConnection {
  # A list of edges.
  edges: [StaffEdge]
  # A list of nodes.
  nodes: [Staff]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type StaffEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Staff
}

input StaffOrder {
  field: StaffOrderField!
  direction: OrderDirection!
}

enum StaffOrderField {
  CREATED_AT
  SORT_NUMBER
}

union StaffResourceItem = Organization | Person
type Status implements Node {
  annictId: Int!
  createdAt: DateTime!
  id: ID!
  likesCount: Int!
  state: StatusState!
  user: User!
  work: Work!
}

enum StatusState {
  WANNA_WATCH
  WATCHING
  WATCHED
  ON_HOLD
  STOP_WATCHING
  NO_STATE
}

# Autogenerated input type of UpdateRecord
input UpdateRecordInput {
  recordId: ID!
  comment: String
  ratingState: RatingState
  shareTwitter: Boolean
  shareFacebook: Boolean
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateRecord
type UpdateRecordPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  record: Record
}

# Autogenerated input type of UpdateReview
input UpdateReviewInput {
  reviewId: ID!
  title: String
  body: String!
  ratingOverallState: RatingState!
  ratingAnimationState: RatingState!
  ratingMusicState: RatingState!
  ratingStoryState: RatingState!
  ratingCharacterState: RatingState!
  shareTwitter: Boolean
  shareFacebook: Boolean
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateReview
type UpdateReviewPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  review: Review
}

# Autogenerated input type of UpdateStatus
input UpdateStatusInput {
  workId: ID!
  state: StatusState!
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
}

# Autogenerated return type of UpdateStatus
type UpdateStatusPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  work: Work
}

type User implements Node {
  activities(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  annictId: Int!
  avatarUrl: String
  backgroundImageUrl: String
  createdAt: DateTime!
  description: String!
  email: String
  followers(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  followersCount: Int!
  following(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): UserConnection
  followingActivities(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ActivityOrder
  ): ActivityConnection
  followingsCount: Int!
  id: ID!
  libraryEntries(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    # 視聴ステータス
    states: [StatusState!]
    # 指定したシーズンの作品を取得する
    seasons: [String!]
    # 指定したシーズンからの作品を取得する
    seasonFrom: String
    # 指定したシーズンまでの作品を取得する
    seasonUntil: String
    orderBy: LibraryEntryOrder
  ): LibraryEntryConnection
  name: String!
  notificationsCount: Int
  onHoldCount: Int!
  programs(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    unwatched: Boolean
    orderBy: ProgramOrder
  ): ProgramConnection
  records(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: RecordOrder
    hasComment: Boolean
  ): RecordConnection
  recordsCount: Int!
  stopWatchingCount: Int!
  url: String
  username: String!
  viewerCanFollow: Boolean!
  viewerIsFollowing: Boolean!
  wannaWatchCount: Int!
  watchedCount: Int!
  watchingCount: Int!
  works(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    annictIds: [Int!]
    seasons: [String!]
    titles: [String!]
    state: StatusState
    orderBy: WorkOrder
  ): WorkConnection
}

# The connection type for User.
type UserConnection {
  # A list of edges.
  edges: [UserEdge]
  # A list of nodes.
  nodes: [User]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type UserEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: User
}

# An anime title
type Work implements Node {
  annictId: Int!
  casts(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: CastOrder
  ): CastConnection
  episodes(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: EpisodeOrder
  ): EpisodeConnection
  episodesCount: Int!
  id: ID!
  image: WorkImage
  malAnimeId: String
  media: Media!
  noEpisodes: Boolean!
  officialSiteUrl: String
  officialSiteUrlEn: String
  programs(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ProgramOrder
  ): ProgramConnection
  reviews(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: ReviewOrder
    hasBody: Boolean
  ): ReviewConnection
  reviewsCount: Int!
  satisfactionRate: Float
  seasonName: SeasonName
  seasonYear: Int
  seriesList(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
  ): SeriesConnection
  staffs(
    # Returns the elements in the list that come after the specified cursor.
    after: String
    # Returns the elements in the list that come before the specified cursor.
    before: String
    # Returns the first _n_ elements from the list.
    first: Int
    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: StaffOrder
  ): StaffConnection
  syobocalTid: Int
  title: String!
  titleEn: String
  titleKana: String
  titleRo: String
  twitterHashtag: String
  twitterUsername: String
  viewerStatusState: StatusState
  watchersCount: Int!
  wikipediaUrl: String
  wikipediaUrlEn: String
}

# The connection type for Work.
type WorkConnection {
  # A list of edges.
  edges: [WorkEdge]
  # A list of nodes.
  nodes: [Work]
  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type WorkEdge {
  # A cursor for use in pagination.
  cursor: String!
  # The item at the end of the edge.
  node: Work
}

type WorkImage implements Node {
  annictId: Int
  copyright: String
  facebookOgImageUrl: String
  id: ID!
  internalUrl(size: String!): String
  recommendedImageUrl: String
  twitterAvatarUrl: String
  twitterBiggerAvatarUrl: String
  twitterMiniAvatarUrl: String
  twitterNormalAvatarUrl: String
  work: Work
}

input WorkOrder {
  field: WorkOrderField!
  direction: OrderDirection!
}

enum WorkOrderField {
  CREATED_AT
  SEASON
  WATCHERS_COUNT
}
